<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Lib</web>
<name>LivetableDataAdapter</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>Main.SpaceIndex</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1376364375000</creationDate>
<date>1376477240000</date>
<contentUpdateDate>1376477240000</contentUpdateDate>
<version>16.1</version>
<title>LivetableDataAdapter</title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{include document="Lib.MongoDBConnection"/}}
{{groovy}}
    import groovy.json.*
    if(request.xpage == "plain") {
	response.setContentType('text/html')
    }    
    def rootLivetableRowList = []
    def rootLivetableData = [:]
    def legacyData = []
    def sortedResultData = [:]
    def dataModel = []
	
    def job = request.get("job")
	
    def fromDate = request.get("fromDate")	
    def toDate = request.get("toDate")
    def limit= (request.get("limit")!=null)?request.get("limit").toInteger():10
	
    def page = request.get("page")
    def rows = (request.get("rows") != null &amp;&amp; !request.get("rows").equals(""))?request.get("rows"):20
    def sidx = request.get("sidx")
    def sord = request.get("sord")
    def genPam = request.get("genp")
    def istIid = request.get("istIid")
    def subType = request.get("subType")
    if(subType != null)
        subType = subType.replaceAll("\"","")
    	
    
    def str= "No data were retrieved!"
    def result = null
    if(job!="" &amp;&amp; job!=null &amp;&amp; istIid != null &amp;&amp; !istIid.equals("")){
        MongoDBConnection.getConnection()
        if(fromDate != "" || toDate != ""){
            result = MongoDBConnection.getDataInPeriod(job,fromDate,toDate,limit,istIid)
        } else {
            result = MongoDBConnection.getDataAllFields(job,limit,istIid)
        }
        MongoDBConnection.closeConnection()       
        
		def idx =0               
		result.each{rec-&gt;		
			//-- get a list of data row
			legacyData = rec['data']
			subtractData = []
			//-- Parsing data and assign data to subtract list
			if(subType == null || subType.equals("")){ //-- Store
				subtractData = legacyData
			}else{ //-- Subtype
				def subTypeDataList = legacyData[subType]
				subtractData = subTypeDataList
			}	
            
			subtractData.each{r2-&gt;
					def livetableRows = [:]
					livetableRows['id'] = rec['fetchAt'] + "_" + idx				
					//-- replace CRLF in values to avoid JSON.parse error				
					def values = new ArrayList&lt;String&gt;(r2.values())
					livetableRows['cell'] = []
                    def newdate = new Date().parse("yyyyMMddHHmmssz", rec['fetchAt'])
                    livetableRows['cell'].add(newdate.format('yyyy/MM/dd HH:mm:ss z'))
					values.each{s-&gt;
					    if(s instanceof java.lang.String){
						    def newVal = s.replaceAll("\\\\","/")
							s = newVal.replaceAll("\r\n","")
							newVal = s.replaceAll("\r","")
							s = newVal.replaceAll("\n","")
						    livetableRows['cell'].add(s)
						}else
						  livetableRows['cell'].add(s)
					}
					if(dataModel != null &amp;&amp; dataModel.size() &lt;=0){ 
						dataModel = new ArrayList&lt;String&gt;(r2.keySet());
					}
					rootLivetableRowList.add(livetableRows)
					idx++
				}	
		}		
		rootLivetableData["records"] = rootLivetableRowList.size()
		
		rootLivetableData["total"] =  Math.round(rootLivetableRowList.size()/rows.toInteger())  //total page 
		rootLivetableData["page"] = (page != null)?page:1
		rootLivetableData["rows"] = rootLivetableRowList
		rootLivetableData["userdata"] = [:]
		rootLivetableData["dataModel"] = dataModel 
				
		sortedResultData = rootLivetableRowList		
		//-- convert sidx to 
		if(sord != null){
		   //-- sorting
		   def arrayMap1 = rootLivetableRowList.toArray(rootLivetableRowList)
		   Arrays.sort(arrayMap1, new Comparator() {
			   public int compare(arg0, arg1) {
					def p = arg1
					def n = arg0
					//-- sort by id first, late we sort by sidx req. pam.
					int lv = (sord.equals("desc"))?p["id"].compareTo(n["id"]):n["id"].compareTo(p["id"])
					if (lv &gt; 0) {
							return 1
					} else if (lv &lt; 0) {
							return -1
					} else {
							return 0
					}
						return lv
				}
			})				
			sortedResultData = arrayMap1			
			//-- Apply filter based on rows and page of request parameters
			if(rows != null &amp;&amp; page != null){				
				def startNum = rows.toInteger()*(page.toInteger() - 1)
				def endNum = rows.toInteger()*page.toInteger()-1
				if (arrayMap1.size() &gt; rows.toInteger()) {
					sortedResultData = arrayMap1.getAt(startNum..endNum)
				} else {
					sortedResultData = arrayMap1
				}
			}
			rootLivetableData["rows"] = sortedResultData
		}		
		//if( rootLivetableData != null &amp;&amp; rootLivetableData.size() &gt; 0 ){		
			//-- Parsing generate parameter 
			def builder = new JsonBuilder(rootLivetableData)		
			if(genPam != null &amp;&amp; genPam.equals("1")){
			    def pagerName = request.get("pager")
				if(pagerName == null || pagerName.equals(""))
				   str = "Must specify parameter pager incase you want to build data model (with genp parameter)"				
				def dataUrl =  ""
				if(subType == null || subType == "")
					dataUrl = "/xwiki/bin/get/Lib/LivetableDataAdapter?outputSyntax=plain&amp;job="+job +"&amp;limit="+limit+"&amp;fromDate="+fromDate + "&amp;toDate=" + toDate + "&amp;istIid="+istIid
				else
					dataUrl = "/xwiki/bin/get/Lib/LivetableDataAdapter?outputSyntax=plain&amp;job="+job +"&amp;limit="+limit+"&amp;fromDate="+fromDate + "&amp;toDate=" + toDate + "&amp;istIid="+istIid+"&amp;subType="+subType
				
				//-- Building data model				
				def model = []
				def colSpec
				dataModel.each{name-&gt;
				    colSpec = [:]
					colSpec['name'] = name
					colSpec['index'] = name
					colSpec['width'] = "100"
					model.add(colSpec)
				}
				def dataModelStr = (new JsonBuilder(dataModel)).toPrettyString()
				def modelStr = (new JsonBuilder(model)).toPrettyString() 

				def sortStr = (sord == null || sord.equals(""))?"asc":sord				
				str = 
				"{\"url\":\""+dataUrl+"\",\"datatype\":\"json\","+
					"\"colNames\":"+ dataModelStr +
					",\"colModel\":"+ modelStr +" ,\"rowList\":[10,20,30],"+
					"\"pager\":\"#"+pagerName+"\", \"viewrecords\": true, \"sortname\": \"RECORD_SEQ\","+
					"\"sortorder\": \""+ sortStr +"\", \"caption\":\""+job+"\"}"
				println str 
				
			}else{					
				str = builder.toPrettyString()							
				println str 
			}				
		//}		
    }
    
{{/groovy}}</content></xwikidoc>
