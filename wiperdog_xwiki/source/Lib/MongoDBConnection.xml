<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Lib</web>
<name>MongoDBConnection</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>Lib.WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1376364375000</creationDate>
<date>1376367157000</date>
<contentUpdateDate>1376367157000</contentUpdateDate>
<version>3.9</version>
<title>MongoDBConnection</title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>true</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{groovy}}@Grab(group='com.gmongo', module='gmongo', version='1.0')
import com.gmongo.GMongo
import java.text.SimpleDateFormat

class MongoDBConnection{
 def static final dbName = 'wiperdog'
 def static final host= '153.122.22.111'
 def static final port = 27017
 def static db
 def static gmongo
 def static getConnection(){
  
  if( gmongo == null &amp;&amp; db == null){
   // Remote connect to host:port
   gmongo = new GMongo(host, port)
   // Local connect
   //def gmongo = new GMongo()
   db = gmongo.getDB(dbName)
  }
  return gmongo 
 }
 def static closeConnection(){
    gmongo.close()
 }
 //Get all records
 def static getDataAllFields(collection){
  def list_data = []
  assert collection != null &amp;&amp; collection != "" : "Can not get data ! Collection is null or empty string"
  def result = db[collection].find();
  while(result.hasNext()){
   list_data.add(result.next())
  }
  return list_data

 }
 //Get limit N lastest records
 def static getDataAllFields(collection,limit,istIid){
  def list_data = []
  assert collection != null &amp;&amp; collection != "" : "Can not get data ! Collection is null or empty string"
  assert limit != null : "Can not get data ! Limit is null"
  def realCollectionName = collection + "." + istIid
  def result = db[realCollectionName].find().sort( fetchAt : -1).limit(limit)
  while(result.hasNext()){
   list_data.add(result.next())
  }
  return (ArrayList)list_data.reverse()
 }


 //Get  all records with specific fields
 def static getDataLimitFields(collection,fields){
  def list_data = []
  assert collection != null &amp;&amp; collection != "" : "Can not get data ! Collection is null or empty string"
  assert (fields !=null &amp;&amp; fields !=[]) : "Can not get data ! List fields is null or empty"
  def result = db[collection].find().sort(fetchAt: -1)
  def tmp = [:]
  while(result.hasNext()){
   def doc = result.next()
   doc.data.each{
    if( tmp["fetchAt"] == null){
     tmp["fetchAt"] = doc.fetchAt
    }
    fields.each{item-&gt;
     tmp[item] = it[item]
    }
    list_data.add(tmp)
    tmp=[:]
   }
  }
  return (ArrayList)list_data.reverse()
 }

 //Get  N lastest record with specific fields
 def static getDataLimitFields(collection,fields,limit){
  def list_data = []
  assert collection != null &amp;&amp; collection != "" : "Can not get data ! Collection is null or empty string"
  assert limit != null : "Can not get data ! Limit is null"
  assert (fields !=null &amp;&amp; fields !=[]) : "Can not get data ! List fields is null or empty"
  def result = db[collection].find().sort(fetchAt: -1).limit(limit)
  def tmp = [:]
  while(result.hasNext()){
   def doc = result.next()
   doc.data.each{
    if( tmp["fetchAt"] == null){
     tmp["fetchAt"] = doc.fetchAt
    }
    fields.each{item-&gt;
     tmp[item] = it[item]
    }
    list_data.add(tmp)
    tmp=[:]
   }
  }
  return (ArrayList)list_data.reverse()
 }


 def static getDataInPeriod(collection,fromDate,toDate,limit,istIid){
  def realCollectionName = collection + "." + istIid
  SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")
  def list_data = []
  assert collection != null || collection != "" || istIid != null || istIid !="" : "Can not get data ! Collection is null or empty string"
  assert limit != null : "Can not get data ! Limit is null"
  assert (fromDate != null &amp;&amp; toDate != null) : "Can not get data ! 'From Date' or 'To date' is null !"
  def result = null
  if( toDate!= "" ) {
   toDate = (Long)(format.parse(toDate).getTime()/1000.intValue())
   if(fromDate!= "" ){
    fromDate = (Long)(format.parse(fromDate).getTime()/1000.intValue())
    result = db[realCollectionName].find( fetchedAt_bin: [ $gt: fromDate ,$lt: toDate ]).sort(fetchAt: -1).limit(limit)
   } else {
    result = db[realCollectionName].find( fetchedAt_bin: [ $lt: toDate ]).sort(fetchAt: -1).limit(limit)
   }
  } else {
   if(fromDate!= "" ){
    fromDate = (Long)(format.parse(fromDate).getTime()/1000.intValue())
    result = db[realCollectionName].find( fetchedAt_bin: [ $gt: fromDate ]).sort(fetchAt: -1).limit(limit)
   } else {
       this.getDataAllFields(collection,limit)
   }
  }
  if(result!=null){
   while(result.hasNext()){
    list_data.add(result.next())
   }
   return (ArrayList)list_data.reverse()
  }
 }

}{{/groovy}}\\</content></xwikidoc>
